// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? 
  role          String    @default("user") 

  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  purchases     Purchase[]
  userProgress  UserProgress[]
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  authMethod           String? @default("credentials") 
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Course {
  id          String   @id @default(cuid())
  userId      String  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String   @db.Text
  slug        String   @unique @db.Text
  description String?  @db.Text
  imageUrl    String?  @db.Text
  price       String   @default("gratis")
  isPublished Boolean  @default(false)
  level       String?  @db.Text
  category    String?  @db.Text

  chapters Chapter[]
  purchases Purchase[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  videoUrl    String?  @db.Text
  documentUrl DocumentUrl[]
  exam        Exam[]
  position    Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  isfree      Boolean  @default(false)
  isPublished Boolean  @default(false)
  userProgress UserProgress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

  model Exam {
  id         String     @id @default(cuid())
  chapterId  String     @unique
  chapter    Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  passingScore Int      @default(70)
  questions  Question[]
}

model Question {
  id       String   @id @default(cuid())
  examId   String
  exam     Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  text     String
  options  String[] 
  correct  String 
}



model UserProgress {
  id          String   @id @default(cuid())
  userId      String 
  chapterId   String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  score      Float?   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  courseId    String    
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, courseId]) 
  @@index([courseId])
}


model DocumentUrl {
  id          String   @id @default(cuid())
  title       String
  chapterId   String
  documentUrl String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([chapterId, documentUrl])
}